<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OpenGL 学习笔记</title>
    <link href="/2023/11/06/OpenGL%20note/"/>
    <url>/2023/11/06/OpenGL%20note/</url>
    
    <content type="html"><![CDATA[<h1><span id="preface">Preface</span></h1><p class="note note-info">这里主要记录学习OpenGL中的笔记，整理一些重点内容，主要是参考OpenGL.cn的中文教程和《OpenGL超级宝典第五版》</p><p><a href="https://learnopengl-cn.github.io/">OpenGL.cn</a></p><h1><span id="环境搭建">环境搭建</span></h1><p> 由于本人是使用VS 2022构建环境，并且时间有些久远了，所以一些步骤已经忘了<br> 推荐 follow官网中的教程去搭建环境</p><h2><span id="入门">入门</span></h2><h3><span id="你好三角形">你好，三角形</span></h3><p>这一部分覆盖的内容非常多，如果没有图形学基础，那么可以先去学习一下基本内容，如果英文不错，那么推荐CMU Computer graphics,其次Games 101课程也很好，至少要对渲染管线有基本的了解，这里不做过多赘述，这里给出相关链接<br><a href="https://www.bilibili.com/video/BV1Q54y1G7v3/?spm_id_from=333.337.search-card.all.click&vd_source=2c7b87b0573e78a2493776876d4c500a">渲染管线</a><br><a href="https://blog.csdn.net/qq_38065509/category_9873936.html">games101笔记</a></p><h4><span id="顶点输入">顶点输入</span></h4><p><span class="label label-primary">NDC空间</span>也就是[-1,1]^3的三维空间，OpenGL只会处理该空间的3d坐标，通过使用由glViewport函数提供的数据，进行视口变换(Viewport Transform)，标准化设备坐标(Normalized Device Coordinates)会变换为屏幕空间坐标(Screen-space Coordinates)。所得的屏幕空间坐标又会被变换为片段输入到片段着色器中.<br>该顶点数据会作为输入发送给图形渲染管线的第一个处理阶段：顶点着色器。它会在GPU上创建内存用于储存我们的顶点数据，还要配置OpenGL如何解释这些内存，并且指定其如何发送给显卡。顶点着色器接着会处理我们在内存中指定数量的顶点<br><span class="label label-primary">顶点缓冲对象(Vertex Buffer Objects, VBO)</span>管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> VBO;<br><span class="hljs-built_in">glGenBuffers</span>(<span class="hljs-number">1</span>, &amp;VBO);<br><br><span class="hljs-built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO); <span class="hljs-comment">//OpenGL有很多缓冲对象类型，顶点缓冲对象的缓冲类型是GL_ARRAY_BUFFER。</span><br>OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型。我们可以使用glBindBuffer函数把新创建的缓冲绑定<br>到GL_ARRAY_BUFFER目标上  <br>从这一刻起，我们使用的任何（在GL_ARRAY_BUFFER目标上的）缓冲调用都会用来配置当前绑定的缓冲(VBO)<br><br><span class="hljs-built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="hljs-built_in">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);<br>把之前定义的顶点数据复制到缓冲的内存中：glBufferData是一个专门用来把用户定义的数据复制到当前绑定缓冲的函数。<br>它的第一个参数是目标缓冲的类型：顶点缓冲对象当前绑定到GL_ARRAY_BUFFER目标上。<br>第二个参数指定传输数据的大小(以字节为单位)；用一个简单的<span class="hljs-keyword">sizeof</span>计算出顶点数据大小就行。<br>第三个参数是我们希望发送的实际数据。<br><br>第四个参数指定了我们希望显卡如何管理给定的数据。它有三种形式：<br><br>GL_STATIC_DRAW ：数据不会或几乎不会改变。<br>GL_DYNAMIC_DRAW：数据会被改变很多。<br>GL_STREAM_DRAW ：数据每次绘制时都会改变。<br>三角形的位置数据不会改变，每次渲染调用时都保持原样，所以它的使用类型最好是GL_STATIC_DRAW。  <br>如果，比如说一个缓冲中的数据将频繁被改变，那么使用的类型就是GL_DYNAMIC_DRAW或GL_STREAM_DRAW，这  <br>样就能确保显卡把数据放在能够高速写入的内存部分<br></code></pre></td></tr></table></figure><h4><span id="vertex-shaderampfragment-shader">Vertex shader&amp;Fragment shader</span></h4><p>Vertex shader  </p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br>opengl版本和核心模式声明<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>) <span class="hljs-keyword">in</span> <span class="hljs-type">vec3</span> aPos;<br>声明所有的输入顶点属性<br><span class="hljs-keyword">layout</span> (<span class="hljs-keyword">location</span> = <span class="hljs-number">0</span>)设定了输入变量的位置值(Location)<br><br><span class="hljs-type">void</span> main()<br>&#123;<br>    <span class="hljs-built_in">gl_Position</span> = <span class="hljs-type">vec4</span>(aPos.x, aPos.y, aPos.z, <span class="hljs-number">1.0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Fragment shader</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-meta">#version 330 core</span><br><span class="hljs-keyword">out</span> <span class="hljs-type">vec4</span> FragColor;<br><br><span class="hljs-type">void</span> main()<br>&#123;<br>    FragColor = <span class="hljs-type">vec4</span>(<span class="hljs-number">1.0</span>f, <span class="hljs-number">0.5</span>f, <span class="hljs-number">0.2</span>f, <span class="hljs-number">1.0</span>f);<br>&#125; <br></code></pre></td></tr></table></figure><h4><span id="着色器程序">着色器程序</span></h4><p>Shader Program Object是多个着色器合并之后并最终链接完成的版本,需要链接之前编译的shader成一个Shader Program ,<br>当链接着色器至一个程序的时候，它会把每个着色器的输出链接到下个着色器的输入。当输出和输入不匹配的时候，你会得到一个连接错误</p><h4><span id="链接顶点属性">链接顶点属性</span></h4><p>顶点着色器允许我们指定任何以顶点属性为形式的输入。这使其具有很强的灵活性的同时，它还的确意味着我们必须手动指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。所以，我们必须在渲染前指定OpenGL该如何解释顶点数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">glVertexAttribPointer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, GL_FLOAT, GL_FALSE, <span class="hljs-number">3</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>), (<span class="hljs-type">void</span>*)<span class="hljs-number">0</span>);<br><span class="hljs-built_in">glEnableVertexAttribArray</span>(<span class="hljs-number">0</span>); <br><br><span class="hljs-built_in">glVertexAttribPointer</span>();<br>第一个参数指定我们要配置的顶点属性。还记得我们在顶点着色器中使用<span class="hljs-built_in">layout</span>(location = <span class="hljs-number">0</span>)定义了position顶点属性的位置值(Location)吗？它可以把顶点属性的位置值设置为<span class="hljs-number">0</span>。因为我们希望把数据传递到这一个顶点属性中，所以这里我们传入<span class="hljs-number">0</span>。<br>i.e 指定的配置属性是 vertex shader中的 <span class="hljs-built_in">layout</span>(location = <span class="hljs-number">0</span>)定义了position顶点属性 aPos<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>OpenGL Graphics C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人游戏引擎开发</title>
    <link href="/2023/10/28/GameEngine%20Course/"/>
    <url>/2023/10/28/GameEngine%20Course/</url>
    
    <content type="html"><![CDATA[<h1><span id="preface">Preface</span></h1><p class="note note-info">之前一直缺乏引擎的相关的工程实践，刚好在油管看到从0搭建游戏引擎的课程，刚好能全程跟着做下来,主要注重于引擎的渲染模块的实现</p><h2><span id="相关链接">相关链接</span></h2><p><a href="https://www.youtube.com/playlist?list=PLU2nPsAdxKWQYxkmQ3TdbLsyc1l2j25XM">youtube链接</a></p><p><a href="https://www.bilibili.com/video/BV1FF411t7E2?p=1&vd_source=2c7b87b0573e78a2493776876d4c500a">bilibili链接</a></p><p> p94:项目从vs2019升级到vs2022</p><h2><span id="架构设计">架构设计</span></h2><p>引擎本身采用 C# WPF开发界面端，调用引擎端的DLL，类似Unity 的架构方式</p><h2><span id="wpf窗体开发">WPF窗体开发</span></h2><p><a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/introduction-to-wpf?view=netframeworkdesktop-4.8&preserve-view=true">WPF doc</a></p><h1><span id="课程开发记录">课程开发记录</span></h1><p class="note note-success">我是跟着课程每节去做的引擎，这里会记录每节课程的 1.工程实践内容 2.相关重点</p><h2><span id="1-introduction-to-gameengine">1 introduction to GameEngine</span></h2><h2><span id="2-loading-project-template-for-game-projects">2 loading project template for game projects</span></h2><h2><span id="3-implement-creating-new-gameobjects">3 implement creating new gameobjects</span></h2><p>todo jobs:</p><ul><li>1.验证 输入的Name和Path 是否正确</li><li>2.在对应的路径上创建新的project</li><li>3.其他</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>GameEngine C++ Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图形学知识</title>
    <link href="/2023/10/28/%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%A6%82%E8%AE%BA/"/>
    <url>/2023/10/28/%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%A6%82%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1><span id="preface">Preface</span></h1><p class="note note-info">之前一直缺乏引擎的相关的工程实践，刚好在油管看到从0搭建游戏引擎的课程，刚好能全程跟着做下来</p><h2><span id="相关链接">相关链接</span></h2><p><a href="https://www.youtube.com/playlist?list=PLU2nPsAdxKWQYxkmQ3TdbLsyc1l2j25XM">youtube链接</a></p><p><a href="https://www.bilibili.com/video/BV1FF411t7E2?p=1&vd_source=2c7b87b0573e78a2493776876d4c500a">bilibili链接</a></p><h2><span id="架构设计">架构设计</span></h2><p>引擎本身采用 C# WPF开发界面端，调用引擎端的DLL，类似Unity 的架构方式</p><h2><span id="wpf窗体开发">WPF窗体开发</span></h2><p><a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/introduction-to-wpf?view=netframeworkdesktop-4.8&preserve-view=true">WPF doc</a></p><h1><span id="课程开发记录">课程开发记录</span></h1><p class="note note-success">我是跟着课程每节去做的引擎，这里会记录每节课程的 1.工程实践内容 2.相关重点</p>]]></content>
    
    
    
    <tags>
      
      <tag>Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer 阅读笔记</title>
    <link href="/2023/10/06/Cpp-Primer/"/>
    <url>/2023/10/06/Cpp-Primer/</url>
    
    <content type="html"><![CDATA[<h1><span id="c-primer笔记">C++ primer笔记</span></h1><p class="note note-primary">这里主要是自己的《C++ Primer》读书笔记</p><h2><span id="part-2-c-标准库">Part 2 C++ 标准库</span></h2><h3><span id="动态内存">动态内存</span></h3><p>在程序块中创建局部对象，分配在栈空间上，会随着程序进入和离开程序块创建和销毁，静态对象 static对象分配在静态内存区中，在第一次使用前分配，程序结束销毁</p><p>上述，二者都是又编译器自动创建和销毁，而对于动态对象（Dynamic Object），即，new出来的，分配在堆空间的对象，需要显示delete释放空间，否则会造成memory leak,为了安全使用Dynamic Object，标准库引入了两个智能指针：管理对象，确保可以在对象应该被释放时，智能指针自动会释放。</p><p>标准库引入了两种智能指针，<br><span class="label label-primary">shared_ptr: 允许多个指针指向同一个对象</span><br><span class="label label-success">unique_ptr: 指针独占同一个对象</span><br>还有一个weak_ptr的伴随类，弱引用，指向 shared_ptr管理的对象，都定义在&lt; memory &gt;头文件中。</p><h4><span id="shared_ptr">shared_ptr</span></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> p=<span class="hljs-built_in">make_shared</span>&lt;T&gt;(arg)<br>p.<span class="hljs-built_in">unique</span>()<br>p.<span class="hljs-built_in">use_count</span>()<span class="hljs-comment">//当 shared_ptr p的计数器为0时，p会调用析构函数 ，销毁对象释放内存=&gt;自动释放对象</span><br>p-&gt;mem;<br>p.<span class="hljs-built_in">get</span>() <span class="hljs-comment">//return p保存的指针</span><br>shared_ptr&lt;T&gt;<span class="hljs-built_in">p</span>(q) <span class="hljs-comment">//复制</span><br></code></pre></td></tr></table></figure><p>shared_ptr 自动释放相关联对象，以下三个例子可以说明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">shared_ptr&lt;Foo&gt; <span class="hljs-title">factory</span><span class="hljs-params">(T arg)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//返回一个shared_ptr指向foo</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">make_shared</span>&lt;Foo&gt;(arg)<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-built_in">use_factory</span>(T arg)<br>&#123;<br>shared_ptr&lt;Foo&gt; p=<span class="hljs-built_in">factory</span>(arg);<br><span class="hljs-comment">//如果只有一个shared_ptr指向arg，p离开作用域，指向内存自动销毁，否则不会</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">use_factory</span><span class="hljs-params">(T arg)</span></span><br><span class="hljs-function"></span>&#123;<br>shared_ptr&lt;Foo&gt; p=<span class="hljs-built_in">factory</span>(arg);<br><span class="hljs-keyword">return</span> p;<br><span class="hljs-comment">//p离开作用域，指向内存不会销毁</span><br><span class="hljs-comment">//返回一个p的复制</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>只要有一个shared_ptr指向对象，该对象就不会销毁，所以确保shared_ptr无用后要及时销毁</strong></p><p>程序使用动态内存原因：</p><ul><li>1.程序不知道需要使用多少对象</li><li>2.程序不知道所需对象的准确类型</li><li>3.程序需要在多个对象间共享对象</li></ul><p>不要忘记delete动态内存，否则问题严重<br>当指针离开作用域之前，一定要释放对应的动态内存</p><p><strong>shared_ptr与new的结合使用:</strong><br>由于接受指针的参数的智能指针构造函数是 explicit所以无法隐式转换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">shared_ptr&lt;<span class="hljs-type">int</span>&gt;p1= <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1024</span>);<span class="hljs-comment">//错误 无法隐式转换</span><br>shared_ptr&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">p2</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1024</span>));<span class="hljs-comment">// 正确 必须直接初始化</span><br></code></pre></td></tr></table></figure><p>用于初始化 智能指针的普通指针必须指向动态内存，否则需要提供自己操作替代delete</p><p><img src="/2023/10/06/Cpp-Primer/12A1.jpg"></p><p><img src="/2023/10/06/Cpp-Primer/12A2.jpg"></p><h4><span id="unique_ptr">unique_ptr</span></h4><h4><span id="weak_ptr">weak_ptr</span></h4>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO博客配置和MarkDown语法</title>
    <link href="/2023/02/28/Hi%20World/"/>
    <url>/2023/02/28/Hi%20World/</url>
    
    <content type="html"><![CDATA[<h1><span id="hexo博客搭建和markdown语法">HEXO博客搭建和MarkDown语法</span></h1><h2><span id="hexo博客配置">HEXO博客配置</span></h2><h3><span id="参考">参考</span></h3><p><a href="https://hexo.io/docs/writing.html">hexo fluid配置指南</a><br><a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.337.search-card.all.click&vd_source=2c7b87b0573e78a2493776876d4c500a">博客搭建视频教程</a><br><a href="https://blog.cchealthier.com/2023/09/24/hexo-code-highlight/">Highlight.js 优化代码块高亮效果</a></p><h3><span id="搭建步骤">搭建步骤</span></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>#安装Nodejs<br>node -v#查看node版本<br>npm -v#查看npm版本<br>npm install -g cnpm --registry=http:<span class="hljs-comment">//registry.npm.taobao.org#安装淘宝的cnpm 管理器</span><br>cnpm -v#查看cnpm版本<br>cnpm install -g hexo-cli    #安装hexo框架<br>hexo -v#查看hexo版本<br>mkdir blog#创建blog目录<br>cd blog #进入blog目录<br>sudo hexo init #生成博客 初始化博客<br>hexo s#启动本地博客服务<br>http:<span class="hljs-comment">//localhost:4000/#本地访问地址</span><br>hexo n <span class="hljs-string">&quot;我的第一篇文章&quot;</span> #创建新的文章 <br>#返回blog目录<br>hexo clean #清理<br>hexo g #生成<br>#Github创建一个新的仓库 YourGithubName.github.io<br>cnpm install --save hexo-deployer-git #在blog目录下安装git部署插件<br><br><br>#配置_config.yml <br>-----<br># Deployment<br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span><br>deploy:<br>  type: git<br> repo: https:<span class="hljs-comment">//github.com/YourGithubName/YourGithubName.github.io.git</span><br>  branch: master<br>-----<br>hexo d#部署到Github仓库里<br>https:<span class="hljs-comment">//YourGithubName.github.io/  #访问这个地址可以查看博客</span><br><br> git clone https:<span class="hljs-comment">//github.com/litten/hexo-theme-yilia.git themes/yilia  #下载yilia主题到本地</span><br><br>#修改hexo根目录下的 _con fig.yml 文件 ： theme: yilia<br><br>hexo c#清理一下<br>hexo g#生成<br>hexo d#部署到远程Github仓库<br>https:<span class="hljs-comment">//YourGithubName.github.io/  #查看博客</span><br><br><br></code></pre></td></tr></table></figure><h2><span id="markdown语法">MarkDown语法</span></h2><h3><span id="代码块-code-block">代码块-code block</span></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   cout&lt;&lt;<span class="hljs-string">&quot;c++ code here&quot;</span>&lt;&lt;endl;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2><span id="便签">便签</span></h2><p>可选便签有：primary，secondary，success，danger，warning，info，light</p><p class="note note-primary">标签-primary</p><p class="note note-secondary">标签-secondary</p><p class="note note-success">标签-success</p><p class="note note-danger">标签-danger</p><p class="note note-warning">标签-warning</p><p class="note note-info">标签-info</p><p class="note note-light">标签-light</p><h2><span id="行内标签">行内标签</span></h2><p>可选标签同上<br><span class="label label-primary">Label</span></p><h2><span id="超链接">超链接</span></h2><p><a href="https://hexo.io/docs/writing.html">Writing</a></p><h2><span id="图片">图片</span></h2><p><img src="/img/bg/back.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/28/hello-world/"/>
    <url>/2023/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><a href="https://www.notion.so/Part-II-C-b914292d7b8a4419901fc4c66a6ff93f">this</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
